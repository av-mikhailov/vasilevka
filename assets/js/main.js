(function() {
    "use strict";

    // --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –•–ï–õ–ü–ï–†–´ ---
    const ACCENT_COLOR_HEX = "#917A5A"; 
    const select = (el, all = false) => {
        el = el.trim();
        const node = document.querySelector(el);
        if (all) {
            return [...document.querySelectorAll(el)];
        } else {
            return node;
        }
    }
    
    // --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–´–î–ï–õ–ï–ù–ò–Ø –ê–ö–¢–ò–í–ù–û–ì–û –ü–£–ù–ö–¢–ê –ú–ï–ù–Æ (–ù–ê–í–ò–ì–ê–¶–ò–ò) ---
    // –í—ã–Ω–µ—Å–µ–Ω–∞ –∏–∑ DOMContentLoaded, —á—Ç–æ–±—ã –∫–ª–∞—Å—Å 'active' –ø—Ä–∏–º–µ–Ω—è–ª—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ
    function setActiveNavLink() {
        const currentPath = window.location.pathname;
        const navLinks = document.querySelectorAll('.nav-link');
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏: —É–¥–∞–ª—è–µ–º —Å–ª—ç—à–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        const normalizedCurrentPath = currentPath.replace(/^\/|\/$/g, '');

        navLinks.forEach(link => {
            const linkHref = link.getAttribute('href');
            
            if (!linkHref) return; 

            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ —Å—Å—ã–ª–∫–∏
            const normalizedLinkHref = linkHref.replace(/^\/|\/$/g, '');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (index.html –∏–ª–∏ '/')
            if (normalizedLinkHref === '' && (normalizedCurrentPath === '' || normalizedCurrentPath === 'index.html')) {
                 link.classList.add('active');
                 return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if (normalizedCurrentPath === normalizedLinkHref) {
                link.classList.add('active');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (URL —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è —Ä–∞–∑–¥–µ–ª–∞)
            const sectionName = normalizedLinkHref.replace('.html', '');
            if (sectionName !== '' && normalizedCurrentPath.startsWith(sectionName) && sectionName !== 'index') {
                link.classList.add('active');
            }
        });
    }

    // üöÄ –í–´–ó–´–í–ê–ï–ú –°–†–ê–ó–£, —á—Ç–æ–±—ã –∫–ª–∞—Å—Å active –¥–æ–±–∞–≤–∏–ª—Å—è –¥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setActiveNavLink();


    // --- –§–£–ù–ö–¶–ò–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í (Header, Typing Effect, Scroll Top) ---

    const selectBody = select('body');
    const selectHeader = select('#header');
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ 'scrolled' –∫ <body> –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
     */
    function toggleScrolled() {
        if (!selectBody || !selectHeader) return; 
        
        window.scrollY > 100 
            ? selectBody.classList.add('scrolled') 
            : selectBody.classList.remove('scrolled');
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
     */
    const mobileNavToggleBtn = select('.mobile-nav-toggle');

    function mobileNavToogle() {
        if (!selectBody || !mobileNavToggleBtn) return;
        
        selectBody.classList.toggle('mobile-nav-active');
        mobileNavToggleBtn.classList.toggle('bx-menu');
        mobileNavToggleBtn.classList.toggle('bx-x');
    }

    /**
     * Scroll top button (–ö–Ω–æ–ø–∫–∞ "–ù–∞–≤–µ—Ä—Ö")
     */
    const scrollTop = select('.scroll-top');

    function toggleScrollTop() {
        if (!scrollTop) return;
        window.scrollY > 100 
            ? scrollTop.classList.add('active') 
            : scrollTop.classList.remove('active');
    }
    
    /**
     * –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è (Typing Effect)
     */
    function setupTypingEffect() {
        const el = document.querySelector('.typed-text');
        if (!el) return;

        const text = el.textContent.trim();
        const charCount = text.length;
        
        // 1. –ò–∑–º–µ—Ä—è–µ–º —Ç–æ—á–Ω—É—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        el.style.visibility = 'hidden'; 
        el.style.width = 'auto'; 
        
        const finalWidth = el.offsetWidth + 'px';
        
        el.style.width = '0';
        el.style.visibility = 'visible';
        
        // 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ @keyframes (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        const styleSheet = document.styleSheets[0];
        let hasTypingKeyframes = false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª–∞ typing –∏ blink
        for (let i = 0; i < styleSheet.cssRules.length; i++) {
            if (styleSheet.cssRules[i].name === 'typing' || styleSheet.cssRules[i].name === 'blink') {
                hasTypingKeyframes = true;
                break;
            }
        }

        if (!hasTypingKeyframes) {
            styleSheet.insertRule(`
                @keyframes typing {
                    from { width: 0 }
                    to { width: ${finalWidth} } 
                }
            `, styleSheet.cssRules.length);

            styleSheet.insertRule(`
                @keyframes blink {
                    from, to { border-color: transparent }
                    50% { border-color: ${ACCENT_COLOR_HEX} } 
                }
            `, styleSheet.cssRules.length);
        }
        
        // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        const animationDuration = `${charCount * 0.15}s`; 
        
        el.classList.remove('typing-complete');
        el.style.animation = `typing ${animationDuration} steps(${charCount}, end) forwards, blink .75s step-end infinite`;
        
        // 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è
        el.addEventListener('animationend', (e) => {
            if (e.animationName === 'typing') {
                el.style.animation = `none`; 
                el.classList.add('typing-complete');
                el.style.animation = `blink .75s step-end infinite`; 
            }
        }, { once: true });
    }

    // --- –§–£–ù–ö–¶–ò–ò –§–û–†–ú–´ (–í–∞—à–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞) ---
    function setupMultiStepForm() {
        const form = document.getElementById('eventSubmitForm');
        if (!form) return;
        
        const steps = form.querySelectorAll('.form-step');
        const nextBtn = document.getElementById('next-step-btn');
        const prevBtn = document.getElementById('prev-step-btn');
        const submitBtn = document.getElementById('submit-form-btn');
        const indicator = document.getElementById('step-indicator');
        
        let currentStep = 0; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ (–∏–Ω–¥–µ–∫—Å 0)

        function getStepTitle(index) {
            switch(index) {
                case 0: return '–ö–æ–Ω—Ç–∞–∫—Ç—ã';
                case 1: return '–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è';
                case 2: return '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —Å–æ–≥–ª–∞—Å–∏–µ';
                default: return '';
            }
        }
        
        function validateStep(stepIndex) {
            const currentStepEl = steps[stepIndex];
            const requiredInputs = currentStepEl.querySelectorAll('[required]');
            let isValid = true;
            
            requiredInputs.forEach(input => {
                if (!input.value.trim() || (input.type === 'checkbox' && !input.checked)) {
                    isValid = false;
                }
            });
            return isValid;
        }

        function updateForm() {
            // 1. –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥–∏
            steps.forEach((step, index) => {
                step.style.display = (index === currentStep) ? 'block' : 'none';
            });

            // 2. –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            indicator.textContent = `–®–∞–≥ ${currentStep + 1} –∏–∑ ${steps.length}: ${getStepTitle(currentStep)}`;

            // 3. –£–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥"
            prevBtn.style.display = (currentStep === 0) ? 'none' : 'block';

            // 4. –£–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞–ª–µ–µ"/"–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
            if (currentStep === steps.length - 1) {
                nextBtn.style.display = 'none';
                submitBtn.style.display = 'block';
            } else {
                nextBtn.style.display = 'block';
                submitBtn.style.display = 'none';
            }
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        nextBtn.addEventListener('click', () => {
            if (validateStep(currentStep)) {
                currentStep++;
                updateForm();
            } else {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.');
            }
        });

        prevBtn.addEventListener('click', () => {
            currentStep--;
            updateForm();
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
        updateForm();
    }


    // --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–õ–ê–ô–î–ï–†–û–í –ò AOS (DOMContentLoaded) ---
    
    document.addEventListener('DOMContentLoaded', () => {

        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AOS 
        AOS.init({
            duration: 800, 
            once: true,   
            mirror: false, 
            offset: 150,   
        });
        
        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pure Counter
        if (typeof PureCounter !== 'undefined') {
             new PureCounter();
        }

        // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Glightbox –¥–ª—è –ª–∞–π—Ç–±–æ–∫—Å–∞ –≥–∞–ª–µ—Ä–µ–∏
        if (typeof GLightbox !== 'undefined') {
            GLightbox({
                selector: '.glightbox',
                touchNavigation: true,
                loop: true,
                autoplayVideos: true,
            });
        }
        
        // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Swiper –¥–ª—è –±–ª–æ–∫–∞ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π (Features Grid)
        if (select('.features-grid')) {
            new Swiper('.features-grid', {
                slidesPerView: 'auto',
                spaceBetween: 10,
                grabCursor: true,
                freeMode: true,
                loop: false, 
                breakpoints: {
                    992: { 
                        slidesPerView: 6,
                        spaceBetween: 20,
                        allowTouchMove: false,
                        grabCursor: false,
                        freeMode: false,
                    }
                }
            });
        }

        // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Swiper –¥–ª—è –§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ (Gallery)
        if (select('.gallery-slider')) {
            new Swiper('.gallery-slider', {
                speed: 600,
                loop: true,
                autoplay: {
                    delay: 10000,
                    disableOnInteraction: false
                },
                slidesPerView: 'auto',
                breakpoints: {
                    320: { slidesPerView: 1.2, spaceBetween: 5 },
                    768: { slidesPerView: 2.5, spaceBetween: 10 },
                    1024: { slidesPerView: 3, spaceBetween: 15 }
                },
                pagination: {
                    el: '.gallery-navigation .swiper-pagination',
                    type: 'bullets',
                    clickable: true
                },
                navigation: {
                    nextEl: '.gallery-navigation .swiper-button-next',
                    prevEl: '.gallery-navigation .swiper-button-prev'
                }
            });
        }


        // 6. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ê–ô–ú–õ–ê–ô–ù–ê –° –¢–†–ï–ú–Ø –°–õ–ê–ô–î–ï–†–ê–ú–ò üî•
        
        const imageSliderEl = document.getElementById('HistoryImageSlider');
        const textSliderEl = document.getElementById('HistoryTextSlider');
        const yearSliderEl = document.getElementById('HistoryYearSlider'); 
        
        if (imageSliderEl && textSliderEl && yearSliderEl) {
            
            // --- –°–õ–ê–ô–î–ï–†–´ ---

            // 1. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–û—Å–Ω–æ–≤–Ω–æ–π)
            const imageSlider = new Swiper(imageSliderEl, {
                loop: false,
                effect: 'fade',
                fadeEffect: { crossFade: true },
                speed: 500,
                allowTouchMove: false,
            });

            // 2. –¢–µ–∫—Å—Ç (–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏)
            const textSlider = new Swiper(textSliderEl, {
                loop: false,
                effect: 'fade',
                fadeEffect: { crossFade: true },
                speed: 500,
                autoHeight: true, 
                allowTouchMove: false,
                controller: {
                    control: imageSlider
                }
            });

            // 3. –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ì–æ–¥ (–û–¥–æ–º–µ—Ç—Ä)
            const navPoints = document.querySelectorAll('#HistoryTimelineNav .timeline-nav-point');
            const yearSwiperWrapper = yearSliderEl.querySelector('.swiper-wrapper');

            // –ù–∞–ø–æ–ª–Ω—è–µ–º Year Slider –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navPoints.forEach(point => {
                const year = point.getAttribute('data-year');
                const slide = document.createElement('div');
                slide.classList.add('swiper-slide');
                slide.textContent = year;
                yearSwiperWrapper.appendChild(slide);
            });

            const yearSlider = new Swiper(yearSliderEl, {
                direction: 'vertical', // üí° –ö–õ–Æ–ß: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ
                loop: false,
                speed: 500,
                allowTouchMove: false,
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–ª–∞–π–¥–µ—Ä–æ–º
                controller: {
                    control: textSlider
                }
            });

            // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Ç–æ—á–∫–∞–º —Ç–∞–π–º–ª–∞–π–Ω–∞
            navPoints.forEach((point, index) => {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º <div> –∏–ª–∏ <button> –≤ —Ä–∞–±–æ—á–∏–µ –∫–Ω–æ–ø–∫–∏
                if (point.tagName.toLowerCase() !== 'button') {
                    point.outerHTML = `<button class="timeline-nav-point" data-year="${point.dataset.year}">${point.innerHTML}</button>`;
                }
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–º–µ–Ω—ã —Ç–µ–≥–æ–≤
                const currentPoint = document.querySelectorAll('#HistoryTimelineNav .timeline-nav-point')[index];

                currentPoint.addEventListener('click', () => {
                    // –°–±—Ä–æ—Å –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ—á–∫–∏
                    navPoints.forEach(p => p.classList.remove('active'));
                    currentPoint.classList.add('active');
                    
                    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å–ª–∞–π–¥–µ—Ä–æ–≤
                    imageSlider.slideTo(index);
                    textSlider.slideTo(index);
                    yearSlider.slideTo(index); 
                });
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å–ª–∞–π–¥–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—á–∫–∏)
            textSlider.on('slideChange', function () {
                const activeIndex = textSlider.activeIndex;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç–æ—á–∫—É
                navPoints.forEach(p => p.classList.remove('active'));
                navPoints[activeIndex].classList.add('active');
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥–æ–¥–∞ (–µ—Å–ª–∏ —Å–º–µ–Ω–∏–ª–æ—Å—å –Ω–µ —á–µ—Ä–µ–∑ –∫–ª–∏–∫)
                yearSlider.slideTo(activeIndex);
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (!document.querySelector('#HistoryTimelineNav .active')) {
                // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ HTML, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                navPoints[0].classList.add('active');
            } else {
                 // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–ª–∞–π–¥–µ—Ä—ã —Å—Ç–æ—è—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                 const activeIndex = Array.from(navPoints).findIndex(p => p.classList.contains('active'));
                 if (activeIndex !== -1) {
                     imageSlider.slideTo(activeIndex, 0); // –ë–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
                     textSlider.slideTo(activeIndex, 0);
                     yearSlider.slideTo(activeIndex, 0);
                 }
            }
        }
        
    });

    // --- –ù–ê–í–ï–®–ò–í–ê–ù–ò–ï –°–õ–£–®–ê–¢–ï–õ–ï–ô (SCROLL, LOAD, CLICK) ---
    
    // –û–±—â–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ (Scrolled Class, Scroll Top)
    document.addEventListener('scroll', toggleScrolled);
    window.addEventListener('load', toggleScrolled);

    if (mobileNavToggleBtn) {
        mobileNavToggleBtn.addEventListener('click', mobileNavToogle);
    }
    
    // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–≤–µ—Ä—Ö"
    if (scrollTop) {
        scrollTop.addEventListener('click', (e) => {
            e.preventDefault();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });
        window.addEventListener('load', toggleScrollTop);
        document.addEventListener('scroll', toggleScrollTop);
    }

    // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
    window.addEventListener('load', setupTypingEffect);
    
    // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–π —Ñ–æ—Ä–º—ã
    document.addEventListener('DOMContentLoaded', setupMultiStepForm);
    
})();